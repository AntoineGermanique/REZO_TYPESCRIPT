/////////////////////autoSizeText.js
'use strict';
////////////////////border.js
function border() {
}
/////////interactiveLink.js
/*!
 * jQuery Mousewheel 3.1.12
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
// (function (factory) {
//     if ( typeof define === 'function' && define.amd ) {
//         // AMD. Register as an anonymous module.
//         define(['jquery'], factory);
//     } else if (typeof exports === 'object') {
//         // Node/CommonJS style for Browserify
//         module.exports = factory;
//     } else {
//         // Browser globals
//         factory(jQuery);
//     }
// }(function ($) {
//     var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
//         toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
//                     ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
//         slice  = Array.prototype.slice,
//         nullLowestDeltaTimeout, lowestDelta;
//     if ( $.event.fixHooks ) {
//         for ( var i = toFix.length; i; ) {
//             $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
//         }
//     }
//     var special = $.event.special.mousewheel = {
//         version: '3.1.12',
//         setup: function() {
//             if ( this.addEventListener ) {
//                 for ( var i = toBind.length; i; ) {
//                     this.addEventListener( toBind[--i], handler, false );
//                 }
//             } else {
//                 this.onmousewheel = handler;
//             }
//             // Store the line height and page height for this particular element
//             $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
//             $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
//         },
//         teardown: function() {
//             if ( this.removeEventListener ) {
//                 for ( var i = toBind.length; i; ) {
//                     this.removeEventListener( toBind[--i], handler, false );
//                 }
//             } else {
//                 this.onmousewheel = null;
//             }
//             // Clean up the data we added to the element
//             $.removeData(this, 'mousewheel-line-height');
//             $.removeData(this, 'mousewheel-page-height');
//         },
//         getLineHeight: function(elem) {
//             var $elem = $(elem),
//                 $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
//             if (!$parent.length) {
//                 $parent = $('body');
//             }
//             return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
//         },
//         getPageHeight: function(elem) {
//             return $(elem).height();
//         },
//         settings: {
//             adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
//             normalizeOffset: true  // calls getBoundingClientRect for each event
//         }
//     };
//     $.fn.extend({
//         mousewheel: function(fn) {
//             return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
//         },
//         unmousewheel: function(fn) {
//             return this.unbind('mousewheel', fn);
//         }
//     });
//     function handler(event) {
//         var orgEvent   = event || window.event,
//             args       = slice.call(arguments, 1),
//             delta      = 0,
//             deltaX     = 0,
//             deltaY     = 0,
//             absDelta   = 0,
//             offsetX    = 0,
//             offsetY    = 0;
//         event = $.event.fix(orgEvent);
//         event.type = 'mousewheel';
//         // Old school scrollwheel delta
//         if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
//         if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
//         if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
//         if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }
//         // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
//         if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
//             deltaX = deltaY * -1;
//             deltaY = 0;
//         }
//         // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
//         delta = deltaY === 0 ? deltaX : deltaY;
//         // New school wheel delta (wheel event)
//         if ( 'deltaY' in orgEvent ) {
//             deltaY = orgEvent.deltaY * -1;
//             delta  = deltaY;
//         }
//         if ( 'deltaX' in orgEvent ) {
//             deltaX = orgEvent.deltaX;
//             if ( deltaY === 0 ) { delta  = deltaX * -1; }
//         }
//         // No change actually happened, no reason to go any further
//         if ( deltaY === 0 && deltaX === 0 ) { return; }
//         // Need to convert lines and pages to pixels if we aren't already in pixels
//         // There are three delta modes:
//         //   * deltaMode 0 is by pixels, nothing to do
//         //   * deltaMode 1 is by lines
//         //   * deltaMode 2 is by pages
//         if ( orgEvent.deltaMode === 1 ) {
//             var lineHeight = $.data(this, 'mousewheel-line-height');
//             delta  *= lineHeight;
//             deltaY *= lineHeight;
//             deltaX *= lineHeight;
//         } else if ( orgEvent.deltaMode === 2 ) {
//             var pageHeight = $.data(this, 'mousewheel-page-height');
//             delta  *= pageHeight;
//             deltaY *= pageHeight;
//             deltaX *= pageHeight;
//         }
//         // Store lowest absolute delta to normalize the delta values
//         absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );
//         if ( !lowestDelta || absDelta < lowestDelta ) {
//             lowestDelta = absDelta;
//             // Adjust older deltas if necessary
//             if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
//                 lowestDelta /= 40;
//             }
//         }
//         // Adjust older deltas if necessary
//         if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
//             // Divide all the things by 40!
//             delta  /= 40;
//             deltaX /= 40;
//             deltaY /= 40;
//         }
//         // Get a whole, normalized value for the deltas
//         delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
//         deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
//         deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);
//         // Normalise offsetX and offsetY properties
//         if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
//             var boundingRect = this.getBoundingClientRect();
//             offsetX = event.clientX - boundingRect.left;
//             offsetY = event.clientY - boundingRect.top;
//         }
//         // Add information to the event object
//         event.deltaX = deltaX;
//         event.deltaY = deltaY;
//         event.deltaFactor = lowestDelta;
//         event.offsetX = offsetX;
//         event.offsetY = offsetY;
//         // Go ahead and set deltaMode to 0 since we converted to pixels
//         // Although this is a little odd since we overwrite the deltaX/Y
//         // properties with normalized deltas.
//         event.deltaMode = 0;
//         // Add event and delta to the front of the arguments
//         args.unshift(event, delta, deltaX, deltaY);
//         // Clearout lowestDelta after sometime to better
//         // handle multiple device types that give different
//         // a different lowestDelta
//         // Ex: trackpad = 3 and mouse wheel = 120
//         if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
//         nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
//         return ($.event.dispatch || $.event.handle).apply(this, args);
//     }
//     function nullLowestDelta() {
//         lowestDelta = null;
//     }
//     function shouldAdjustOldDeltas(orgEvent, absDelta) {
//         // If this is an older event and the delta is divisable by 120,
//         // then we are assuming that the browser is treating this as an
//         // older mouse wheel event and that we should divide the deltas
//         // by 40 to try and get a more usable deltaFactor.
//         // Side note, this actually impacts the reported scroll distance
//         // in older browsers and can cause scrolling to be slower than native.
//         // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
//         return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
//     }
// }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2pzL2F1dG9TaXplVGV4dC50cyIsIi4uL2pzL2JvcmRlci50cyIsIi4uL2pzL2ludGVyYWN0aXZlQnVsbGUudHMiLCIuLi9qcy9pbnRlcmFjdGl2ZUxpbmsudHMiLCIuLi9qcy9qcXVlcnkubW91c2V3aGVlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBb0M7QUFDcEMsWUFBWSxDQUFDO0FDRGIsNkJBQTZCO0FBQzdCO0FBRUEsQ0FBQztBRUhELDJCQUEyQjtBQ0EzQjs7Ozs7O0dBTUc7QUFFSCx3QkFBd0I7QUFDeEIsMERBQTBEO0FBQzFELG1EQUFtRDtBQUNuRCx1Q0FBdUM7QUFDdkMsZ0RBQWdEO0FBQ2hELGdEQUFnRDtBQUNoRCxvQ0FBb0M7QUFDcEMsZUFBZTtBQUNmLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IsUUFBUTtBQUNSLG1CQUFtQjtBQUVuQixxRkFBcUY7QUFDckYsNkVBQTZFO0FBQzdFLDJGQUEyRjtBQUMzRiwwQ0FBMEM7QUFDMUMsK0NBQStDO0FBRS9DLGdDQUFnQztBQUNoQyw2Q0FBNkM7QUFDN0MsbUVBQW1FO0FBQ25FLFlBQVk7QUFDWixRQUFRO0FBRVIsbURBQW1EO0FBQ25ELDZCQUE2QjtBQUU3Qiw4QkFBOEI7QUFDOUIsNkNBQTZDO0FBQzdDLHNEQUFzRDtBQUN0RCw0RUFBNEU7QUFDNUUsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QiwrQ0FBK0M7QUFDL0MsZ0JBQWdCO0FBQ2hCLG1GQUFtRjtBQUNuRixtRkFBbUY7QUFDbkYsbUZBQW1GO0FBQ25GLGFBQWE7QUFFYixpQ0FBaUM7QUFDakMsZ0RBQWdEO0FBQ2hELHNEQUFzRDtBQUN0RCwrRUFBK0U7QUFDL0Usb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2Qiw0Q0FBNEM7QUFDNUMsZ0JBQWdCO0FBQ2hCLDJEQUEyRDtBQUMzRCw0REFBNEQ7QUFDNUQsNERBQTREO0FBQzVELGFBQWE7QUFFYiww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